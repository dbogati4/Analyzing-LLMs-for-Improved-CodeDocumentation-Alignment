{"file": "tests_test_database.py", "function": "test_timewindows", "version_data": [{"v11": {"docstring_lines": {"start_line": 18, "end_line": 20}, "code_lines": {"start_line": 20, "end_line": 43}}, "commit_date_time": "2021-08-09 21:00:11+02:00", "commit_sha": "c476e39bc2aa3f681925a765c9ae29952b5d92c1", "commit_message": "fix stime does not exist", "docstring": "unit tests for addNewTW and getFirstTWforProfile", "code": "def test_timewindows(database):\n      \n    # clear the database before running this test\n    os.system('./slips.py -c slips.conf -cc')\n    profileid = 'profile_8.8.8.8'\n    # add a profile\n    database.addProfile(profileid,'00:00','1')\n    # add a tw to that profile (first tw)\n    database.addNewTW(profileid, 0.0)\n    # add  a new tw (last tw)\n    assert database.getFirstTWforProfile(profileid) == [('timewindow1', 0.0)]"}, {"v12": {"docstring_lines": {"start_line": 16, "end_line": 18}, "code_lines": {"start_line": 18, "end_line": 27}}, "commit_date_time": "2021-08-10 17:25:40+02:00", "commit_sha": "ae7afd2ac83bb0cc6fda551873279c99c0b17e45", "commit_message": "fix stime does not exist", "docstring": "unit tests for addNewTW ,getLastTWforProfile and getFirstTWforProfile", "code": "def test_timewindows(database):\n      \n    profileid = 'profile_192.168.1.1'\n    # add a profile\n    database.addProfile(profileid,'00:00','1')\n    # add a tw to that profile (first tw)\n    database.addNewTW(profileid, 0.0)\n    # add  a new tw (last tw)\n    database.addNewTW(profileid, 5.0)\n    assert database.getFirstTWforProfile(profileid) == [('timewindow1', 0.0)]\n    assert database.getLastTWforProfile(profileid) == [('timewindow2', 5.0)]"}], "diff_code": "  def test_timewindows(database):\n        \n-     # clear the database before running this test\n-     os.system('./slips.py -c slips.conf -cc')\n-     profileid = 'profile_8.8.8.8'\n?                            ^ ^^^\n\n+     profileid = 'profile_192.168.1.1'\n?                          ++++++  ^ ^\n\n      # add a profile\n      database.addProfile(profileid,'00:00','1')\n      # add a tw to that profile (first tw)\n      database.addNewTW(profileid, 0.0)\n      # add  a new tw (last tw)\n+     database.addNewTW(profileid, 5.0)\n      assert database.getFirstTWforProfile(profileid) == [('timewindow1', 0.0)]\n+     assert database.getLastTWforProfile(profileid) == [('timewindow2', 5.0)]", "diff_docstring": "- unit tests for addNewTW and getFirstTWforProfile\n+ unit tests for addNewTW ,getLastTWforProfile and getFirstTWforProfile\n?                         +++++++++++++++++++++\n", "whitespace_only_code": false, "whitespace_only_docstring": false, "file_path": "tests/test_database.py", "filename": "test_database.py", "project": "StratosphereLinuxIPS", "owner": "stratosphereips"}
{"file": "tests_test_database.py", "function": "test_getProfileIdFromIP", "version_data": [{"v124": {"docstring_lines": {"start_line": 40, "end_line": 42}, "code_lines": {"start_line": 42, "end_line": 51}}, "commit_date_time": "2024-01-27 22:28:53+02:00", "commit_sha": "ca454420b9bd8163dc5802ad1c13b1c8cb62e3d3", "commit_message": "update get_rev_profile() unit tests", "docstring": "unit test for addProfile and getProfileIdFromIP", "code": "def test_getProfileIdFromIP():\n    \n\n    # clear the database before running this test\n    os.system('./slips.py -c slips.conf -cc')\n\n    # add a profile\n    db.addProfile('profile_192.168.1.1', '00:00', '1')\n    # try to retrieve it\n    assert db.get_profileid_from_ip(test_ip) is not False"}, {"v125": {"docstring_lines": {"start_line": 57, "end_line": 59}, "code_lines": {"start_line": 59, "end_line": 68}}, "commit_date_time": "2024-02-23 14:55:42+02:00", "commit_sha": "1f9af7a2ce08aa9a18dd9485d75e014940d8006a", "commit_message": "db: use snake case for domain functions", "docstring": "unit test for add_profile and getProfileIdFromIP", "code": "def test_getProfileIdFromIP():\n    \n\n    # clear the database before running this test\n    os.system('./slips.py -c slips.conf -cc')\n\n    # add a profile\n    db.add_profile('profile_192.168.1.1', '00:00', '1')\n    # try to retrieve it\n    assert db.get_profileid_from_ip(test_ip) is not False"}], "diff_code": "  def test_getProfileIdFromIP():\n      \n  \n      # clear the database before running this test\n      os.system('./slips.py -c slips.conf -cc')\n  \n      # add a profile\n-     db.addProfile('profile_192.168.1.1', '00:00', '1')\n?           ^\n\n+     db.add_profile('profile_192.168.1.1', '00:00', '1')\n?           ^^\n\n      # try to retrieve it\n      assert db.get_profileid_from_ip(test_ip) is not False", "diff_docstring": "- unit test for addProfile and getProfileIdFromIP\n?                  ^\n\n+ unit test for add_profile and getProfileIdFromIP\n?                  ^^\n", "whitespace_only_code": false, "whitespace_only_docstring": false, "file_path": "tests/test_database.py", "filename": "test_database.py", "project": "StratosphereLinuxIPS", "owner": "stratosphereips"}
